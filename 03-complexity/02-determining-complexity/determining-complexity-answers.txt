Answer 1 . It's O(1) as its a constant time because the amount of time it takes to execute always stays the same
Answer 2 . Its O(n) as its iterating depending on how big the collection is the bigger the collection is the more time it will take when collection.length will grow bigger the .times method will take more time linerarly
Answer 3 . It's O(n) again as its iterating depending on the collection size again .
Answer 4 . It's O(2^n) as n grows larger the time to execute the code grows exponentially.
Answer 5 . Its O(n) as n grows the time it takes to execute grows too lineraly as its increasing the values every time it runs depending on n .
Answer 6 . it's O(n^2) the run time is simply the max of the 3 so O(n) for while loop then the recursive calls which are O(n*n) so the max would be O(n^2) we simply look at the worst case scenario . 

